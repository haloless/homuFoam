/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      binary;
    class       volVectorField;
    location    "0";
    object      U.air;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    innerCylinder
    {
        type            cylindricalInletVelocity;
        value           uniform (0 0 0);
        axis            (0 0 1);
        centre          (0 0 0);
        axialVelocity   constant 0;
        radialVelocity  constant 0;
        rpm             constant 100;
    }
    outerCylinder
    {
        type            cylindricalInletVelocity;
        value           uniform (0 0 0);
        axis            (0 0 1);
        centre          (0 0 0);
        axialVelocity   constant 0;
        radialVelocity  constant 0;
        rpm             constant 0;
    }
    
    left
    {
        type cyclic;
    }
    down
    {
        type cyclic;
    }
    
    front
    {
        type cyclic;
    }
    back
    {
        type cyclic;
    }
    /*
    walls
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    top
    {
        type            pressureInletOutletVelocity;
        phi             phi.air;
        inletValue      uniform (0 0 0);
        value           uniform (0 0 0);
    }

    bottom
    {
        type            interstitialInletVelocity;
        inletVelocity   uniform (0 0 1.875);
        value           uniform (0 0 1.875);
        phi             phi.air;
        alpha           alpha.air;
    }

    frontAndBack
    {
        type            symmetry;
    }
    */
}


// ************************************************************************* //
